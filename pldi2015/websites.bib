@url{Devectorize.jl,
	Author = {Dahua Lin and Blake Johnson and Thomas Allen Short and others},
	Title = {Devectorize.jl: A {J}ulia framework for delayed expression evaluation},
	Url = {https://github.com/lindahua/Devectorize.jl},
}

@url{Distributions.jl,
	Author = {Dahua Lin and John Myles White and Simon Byrne and Douglas M Bates and Andreas Noack Jensen and others},
	Title = {Distributions.jl: A {J}ulia package for probability distributions and associated functions},
	Url = {https://github.com/JuliaStats/Distributions.jl}
}	

@url{Cairo.jl,
	Author = {Tim Holy and Keno Fischer and Jeff Bezanson and others},
	Title = {Cairo.jl: Bindings to the {C}airo graphics library},
	Url = {https://github.com/JuliaLang/Cairo.jl},
}	

@url{Color.jl,
	Author = {Tim E Holy and Daniel C Jones and Glenn Sweeney and Manuel Lohmann and Jeff Bezanson and Jiahao Chen and others},
	Title = {Color.jl: Basic color manipulation utilities},
	Url = {https://github.com/JuliaLang/Color.jl},
}

@url{Lint.jl,
	Author = {Tony H F Fong and Steve Kelly and Ivar Nesje and Tim E Holy},
	Title = {Lint.jl: A lint tool for {J}ulia code},
	Url = {https://github.com/tonyhffong/Lint.jl},
}

@url{TypeCheck.jl,
	Author = {Leah Hanson and Jameson Nash and Dan Luu and others},
	Title = {TypeCheck.jl: A TypeChecker for {J}ulia},
	Url = {https://github.com/astrieanna/TypeCheck.jl},
}

@url{cairographics,
	Author = {Keith Packard and Carl Worth and Behdad Esfahbod and others},
	Url = {http://cairographics.org},
}

@url{julia-users,
	author = {{julia-users}},
	title = {Google Groups},
	url = {https://groups.google.com/d/forum/julia-users},
}

@url{Hoare2014,
	author = {Graydon Hoare},
	title = {Technicalities: interactive scientific computing \#2 of 2, {G}oldilocks languages},
	url = {http://graydon2.dreamwidth.org/189377.html}
}

@book{matlab,
	year = {2014},
	title = {MATLAB version 8.3.0.532 (R2014a)},
	author = {{The MathWorks Inc.}},
	address = {Natick, Massachusetts}
}

@techreport{pythonref,
	author       = {van Rossum, Guido},
	title        = {Python Reference Manual},
	type         = {CWI Technical Report},
	series       = {Department of Computer Science},
	pages        = {1--54},
	year         = {1995},
	number       = {CS-R9525},
	publisher    = {Centrum voor Wiskunde \& Informatica (CWI)},
	issn         = {0169-118X},
	class        = {D.3.1;D.3.2;D.3.3;D.1.5;E.1},
	abstract     = {Python is a simple, yet powerful, interpreted programming language that bridges the gap between C and shell programming, and is thus ideally suited for ``throw-away programming'' and rapid prototyping. Its syntax is put together from constructs borrowed from a variety of other languages; most prominent are influences from ABC, C, Modula-3 and Icon.  The Python interpreter is easily extended with new functions and data types implemented in C.  Python is also suitable as an extension language for highly customizable C applications such as editors or window managers. Python is available for various operating systems, amongst which several flavors of UNIX (including Linux), the Apple Macintosh O.S., MS-DOS, MS-Windows 3.1, Windows NT, and OS/2. This reference manual describes the syntax and ``core semantics'' of the language.  It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the built-in functions and modules are described in the Python Library Reference.  For an informal introduction to the language, see the Python Tutorial.},
	url          = {http://oai.cwi.nl/oai/asset/5008/05008D.pdf},
}

@techreport{pythonlib,
	author       = {van Rossum, Guido},
	title        = {Python Library Reference},
	type         = {CWI Technical Report},
	series       = {Department of Computer Science},
	pages        = {1--174},
	year         = {1995},
	number       = {CS-R 9523},
	publisher    = {CWI},
	class        = {D.3.2;D.3.3;D.1.5;E.1;E.5;C.2.4},
	abstract     = {Python is an extensible, interpreted, object-oriented programming language.  It supports a wide range of applications, from simple text processing scripts to interactive WWW browsers. While the Python Reference Manual describes the exact syntax and semantics of the language, it does not describe the standard library that is distributed with the language, and which greatly enhances its immediate usability.  This library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming.  Some of these modules are explicitly designed to encourage and enhance the portability of Python programs. This library reference manual documents Python's standard library, as well as many optional library modules (which may or may not be available, depending on whether the underlying platform supports them and on the configuration choices made at compile time).  It also documents the standard types of the language and its built-in functions and exceptions, many of which are not or incompletely documented in the Reference Manual. This manual assumes basic knowledge about the Python language.  For an informal introduction to Python, see the Python Tutorial; the Python Reference Manual remains the highest authority on syntactic and semantic questions.  Finally, the manual entitled Extending and Embedding the Python Interpreter describes how to add new extensions to Python and how to embed it in other applications.},
	url          = {http://oai.cwi.nl/oai/asset/5009/05009D.pdf},
}
