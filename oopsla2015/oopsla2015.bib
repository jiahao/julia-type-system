@article{PythonSciCompute,
	author = {Travis E. Oliphant},
	title = {Python for Scientific Computing},
	journal ={Computing in Science and Engineering},
	volume = {9},
	number = {3},
	publisher = {IEEE Computer Society},
	address = {Los Alamitos, CA, USA},
}
@book{Pierce2002,
	Address = {Cambridge, Massachusetts},
	Author = {Benjamin C Pierce},
	Publisher = {MIT Press},
	Title = {Types and Programming Languages},
	Year = {2002}
}
@unpublished{Strachey1967,
	Author = {Strachey, Christopher},
	Month = {August},
	Note = {Lecture Notes at the International Summer School in Computer Programming, Copenhagen, Denmark},
	Title = {Fundamental concepts of programming languages},
	Year = {1967}
}
@manual{matlabuserguide,
	Address = {Natick, Massachusetts},
	Author = {{The MathWorks, Inc.}},
	Title = {{MATLAB} User's Guide},
	Year = {1992},
	Note = {p. 2-135: ``MATLAB's built-in vector and matrix operations are
		more than an order of magnitude faster than its
		compiler/interpreter operations. This means that to obtain the
		most speed out of MATLAB, you must make every effort to
		vectorize the algorithms in your M--files.''}
}
@manual{rlang,
	Address = {Vienna, Austria},
	Author = {{R Development Core Team}},
	Organization = {R Foundation for Statistical Computing},
	Title = {R: A Language and Environment for Statistical Computing},
	Url = {http://www.R-project.org},
	Year = {2008},
}
@book{dylanman,
	Address = {Cupertino, CA},
	Author = {Andrew Shalit},
	Publisher = {Apple},
	Title = {The Dylan Reference Manual: The Definitive Guide to the New Object-Oriented Dynamic Language},
	Url = {http://opendylan.org/books/drm},
	Year = {1996},
}
@article{lua,
	Author = {Roberto Ierusalimschy and de Figueiredo, Luiz Henrique and Celes Filho, Waldemar},
	Journal = {Software---Practice \& Experience},
	Number = {6},
	Title = {Lua---an extensible extension language},
	Volume = {26},
	Year = {1996},
}
@techreport{mimerfc,
	Annote = {Defines MIME types. There are six IETF RFCs but this one describes the actual media typing system.},
	Author = {N Freed and N Borenstein},
	Institution = {IETF},
	Month = {November},
	Number = {RFC 2046},
	Title = {{M}ultipurpose {I}nternet {M}ail {E}xtensions ({MIME}) Part Two: Media Types},
	Url = {http://tools.ietf.org/html/rfc2046},
	Year = {1996},
}
@book{designpatterns,
	Abstract = {Four software designers present a catalog of simple and succinct solutions to commonly occurring design problems, using Smalltalk and C++ in example code. These 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems.--From publisher description.},
	Address = {Reading, Massachusetts},
	Author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
	Publisher = {Addison-Wesley},
	Title = {Design patterns: elements of reusable object-oriented software},
	Year = {1995}
}
@inproceedings{exotypes,
	Address = {New York, New York, USA},
	Author = {DeVito, Zachary and Ritchie, Daniel and Fisher, Matt and Aiken, Alex and Hanrahan, Pat},
	Booktitle = {PLDI '14},
	Publisher = {ACM Press},
	Title = {First-class runtime generation of high-performance types using exotypes},
	Year = {2014},
}
@inproceedings{typeclass,
	Address = {New York, New York, USA},
	Author = {Wadler, Philip and Blott, Stephen},
	Booktitle = {POPL '89},
	Publisher = {ACM},
	Title = {How to make \textit{ad-hoc} polymorphism less \textit{ad hoc}},
	Year = {1989},
}
@inproceedings{terra,
	Address = {New York, New York, USA},
	Author = {DeVito, Zachary and Hegarty, James and Aiken, Alex and Hanrahan, Pat and Vitek, Jan},
	Booktitle = {PLDI '13},
	Publisher = {ACM},
	Title = {Terra},
	Year = {2013},
}

@inproceedings{stagedfunc,
	Address = {New York, New York, USA},
	Author = {J{\o}rring, Ulrik and Scherlis, William L.},
	Booktitle = {POPL '86},
	Publisher = {ACM},
	Title = {Compilers and staging transformations},
	Year = {1986},
}

@article{haskellkindtypes,
	Address = {New York, New York, USA},
	Author = {Yorgey, Brent A and Weirich, Stephanie and Cretin, Julien and {Peyton Jones}, Simon and Vytiniotis, Dimitrios and Magalh\~{a}es, Jos\'{e} Pedro},
	Journal = {TLDI '12},
	Publisher = {ACM Press},
	Title = {Giving {H}askell a promotion},
	Year = {2012},
}
@inproceedings{Gabriel2012,
	Abstract = {Engineering often precedes science. Incommensurability is real.},
	Address = {New York, New York, USA},
	Author = {Gabriel, Richard P},
	Booktitle = {Onward! '12},
	Publisher = {ACM Press},
	Title = {The structure of a programming language revolution},
	Year = {2012},
}
@article{Mehnert2010,
	Address = {New York, New York, USA},
	Author = {Mehnert, Hannes},
	Journal = {Proceedings of the 2010 international conference on Lisp - ILC '10},
	Publisher = {ACM Press},
	Title = {Extending {D}ylan's type system for better type inference and error detection},
	Year = {2010},
}

@article{Cardelli1985,
	Abstract = {Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages. Object-oriented languages provide both a framework and a motivation for exploring the interaction among the concepts of type, data abstraction, and polymorphism, since they extend the notion of type to data abstraction and since type inheritance is an important form of polymorphism. We develop a \&lgr;-calculus-based model for type systems that allows us to explore these interactions in a simple setting, unencumbered by complexities of production programming languages. The evolution of languages from untyped universes to monomorphic and then polymorphic type systems is reviewed. Mechanisms for polymorphism such as overloading, coercion, subtyping, and parameterization are examined. A unifying framework for polymorphic type systems is developed in terms of the typed \&lgr;-calculus augmented to include binding of types by quantification as well as binding of values by abstraction. The typed \&lgr;-calculus is augmented by universal quantification to model generic functions with type parameters, existential quantification and packaging (information hiding) to model abstract data types, and bounded quantification to model subtypes and type inheritance. In this way we obtain a simple and precise characterization of a powerful type system that includes abstract data types, parametric polymorphism, and multiple inheritance in a single consistent framework. The mechanisms for type checking for the augmented \&lgr;-calculus are discussed. The augmented typed \&lgr;-calculus is used as a programming language for a variety of illustrative examples. We christen this language Fun because fun instead of \&lgr; is the functional abstraction keyword and because it is pleasant to deal with. Fun is mathematically simple and can serve as a basis for the design and implementation of real programming languages with type facilities that are more powerful and expressive than those of existing programming languages. In particular, it provides a basis for the design of strongly typed object-oriented languages.},
	Author = {Cardelli, Luca and Wegner, Peter},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Cardelli, Wegner/ACM Computing Surveys/Cardelli, Wegner - 1985 - On understanding types, data abstraction, and polymorphism.pdf:pdf},
	Issn = {03600300},
	Journal = {ACM Computing Surveys},
	Month = dec,
	Number = {4},
	Pages = {471--523},
	Title = {{On understanding types, data abstraction, and polymorphism}},
	Volume = {17},
	Year = {1985},
}
@article{Vytiniotis2012,
	Author = {Vytiniotis, Dimitrios and {Peyton Jones}, Simon and Magalh\~{a}es, Jos\'{e} Pedro},
	Journal = {ACM SIGPLAN Notices},
	Number = {9},
	Title = {Equality proofs and deferred type errors},
	Volume = {47},
	Year = {2012},
}
@inproceedings{Weirich2011,
	Author = {Weirich, Stephanie and Vytiniotis, Dimitrios and {Peyton Jones}, Simon and Zdancewic, Steve},
	Booktitle = {POPL '11},
	Title = {Generative type abstraction and type-level computation},
	Volume = {46},
	Year = {2011},
}
@article{Strachey2000,
	Author = {Strachey, Christopher},
	Journal = {Higher-Order and Symbolic Computation},
	Title = {{Fundamental Concepts in Programming Languages}},
	Volume = {13},
	Year = {2000},
}
@article{Henglein1994,
	Author = {Henglein, Fritz},
	Issn = {01676423},
	Journal = {Science of Computer Programming},
	Title = {Dynamic typing: syntax and proof theory},
	Volume = {22},
	Year = {1994},
}

@inproceedings{Shields1998,
	Address = {New York, New York, USA},
	Author = {Shields, Mark and Sheard, Tim and {Peyton Jones}, Simon},
	Booktitle = {POPL '98},
	Title = {Dynamic typing as staged type inference},
	Year = {1998},
}
@article{Scott1976,
	author = {Scott, Dana},
	journal = {SIAM J. Comput.},
	number = {3},
	title = {Data types as lattices},
	volume = {5},
	year = {1976}
}
@article{Bruce1995,
	author = {Bruce, Kim and Cardelli, Luca and Castagna, Giuseppe and Leavens, G T and {The Hopkins Object Group} and Pierce, B},
	journal = {Theory Pract. Object Syst.},
	number = {3},
	title = {On binary methods},
	volume = {1},
	year = {1995}
}
@article{Hu1984,
	author = {Hu, T. C. and Shing, M. T.},
	journal = {SIAM J. Comput.},
	number = {2},
	title = {Computation of Matrix Chain Products. Part {II}},
	volume = {13},
	year = {1984}
}
@article{Bezanson2012,
	archivePrefix = {arXiv},
	arxivId = {1209.5145},
	author = {Bezanson, Jeff and Karpinski, Stefan and Shah, Viral B. and Edelman, Alan},
	eprint = {1209.5145},
	month = sep,
	title = {{J}ulia: A Fast Dynamic Language for Technical Computing},
	url = {http://arxiv.org/abs/1209.5145},
	year = {2012}
}
@article{Castagna1995,
	author = {Castagna, Giuseppe},
	hiddendoi = {10.1145/203095.203096},
	journal = {ACM Trans. Program. Lang. Syst.},
	month = may,
	number = {3},
	title = {Covariance and contravariance: conflict without a cause},
	volume = {17},
	year = {1995}
}
@InProceedings{Lattner2004,
	author    = {Chris Lattner and Vikram Adve},
	title     = {{LLVM}: A Compilation Framework for Lifelong Program Analysis \& Transformation},
	booktitle = {CGO '04},
	address   = {Palo Alto, California},
	month     = {Mar},
	publisher = {IEEE},
	year      = {2004}
}
@article{Poincare1908,
	author = {Poincar\'{e}, M. H.},
	hiddendoi = {10.1007/BF03018191},
	journal = {Rend. del Circ. Mat. di Palermo},
	month = dec,
	number = {1},
	title = {L’avenir des math\'{e}matiques},
	volume = {26},
	year = {1908}
}
@incollection{Demmel2007,
	address = {Berlin, Heidelberg},
	author = {Demmel, James W and Dongarra, Jack and Parlett, Beresford and Kahan, William and Gu, Ming and Bindel, David and Hida, Yozo and Li, Xiaoye and Marques, Osni and Riedy, E Jason and Voemel, Christof and Langou, Julien and Luszczek, Piotr and Kurzak, Jakub and Buttari, Alfredo and Langou, Julie and Tomov, Stanimire},
	chapter = {2},
	hiddendoi = {10.1007/978-3-540-75755-9},
	editor = {K\aa{}gstr\"{o}m, Bo and Elmroth, Erik and Dongarra, Jack and Wa\'{s}niewski, Jerzy},
	publisher = {Springer Berlin Heidelberg},
	series = {Lecture Notes in Computer Science},
	booktitle = {Applied Parallel Computing. State of the Art in Scientific Computing},
	title = {Prospectus for the Next {LAPACK} and {ScaLAPACK} Libraries},
	year = {2007}
}
@book{Higham2008,
	address = {Philadelphia, PA},
	author = {Higham, Nicholas J},
	publisher = {SIAM},
	title = {Functions of Matrices: Theory and Computation},
	year = {2008}
}
@article{Abadi1995,
	abstract = {There are situations in programming where some dynamic typing is needed, even in the presence of advanced static type systems. We investigate the interplay of dynamic types with other advanced type constructions, discussing their integration into languages with explicit polymorphism (in the style of system F), implicit polymorphism (in the style of ML), abstract data types, and subtyping.},
	author = {Abadi, M. and Cardelli, L. and Pierce, B. and R\'{e}my, D.},
	hiddendoi = {10.1017/S095679680000126X},
	journal = {J. Funct. Program.},
	keywords = {additional services for journal,cambridge,http,jfp,journals,org,rnal of functional programming},
	month = nov,
	number = {1},
	title = {{Dynamic typing in polymorphic languages}},
	url = {http://www.journals.cambridge.org/abstract_S095679680000126X},
	volume = {5},
	year = {1995}
}
@article{Tratt2009,
	abstract = {Dynamically typed languages such as Python and Ruby have experienced a rapid grown in popularity in recent times. However, there is much confusion as to what makes these languages interesting relative to statically typed lan- guages, and little knowledge of their rich history. In this chapter I explore the general topic of dynamically typed languages, how they differ from statically typed languages, their history, and their defining features.},
	author = {Tratt, Laurence},
	journal = {Adv. Comput.},
	title = {{Dynamically Typed Languages}},
	volume = {77},
	year = {2009}
}
@article{Donahue1985,
	author = {Donahue, James and Demers, Alan},
	hiddendoi = {10.1145/3916.3987},
	journal = {ACM Trans. Program. Lang. Syst.},
	month = jul,
	number = {3},
	title = {Data types are values},
	volume = {7},
	year = {1985}
}
@article{Baars2002,
	author = {Baars, Arthur I. and Swierstra, S. Doaitse},
	hiddendoi = {10.1145/583852.581494},
	journal = {ACM SIGPLAN Not.},
	month = sep,
	number = {9},
	title = {Typing dynamic typing},
	volume = {37},
	year = {2002}
}
@article{Kell2014,
	address = {New York, New York, USA},
	author = {Kell, Stephen},
	hiddendoi = {10.1145/2661136.2661154},
	journal = {Onward! '14},
	publisher = {ACM Press},
	title = {In Search of Types},
	year = {2014}
}
@inproceedings{Bezanson2014,
	address = {New York, New York, USA},
	author = {Bezanson, Jeff and Chen, Jiahao and Karpinski, Stefan and Shah, Viral and Edelman, Alan},
	booktitle = {Proc. ACM SIGPLAN Int. Work. Libr. Lang. Compil. Array Program. - ARRAY'14},
	hiddendoi = {10.1145/2627373.2627383},
	publisher = {ACM},
	title = {Array Operators Using Multiple Dispatch},
	year = {2014}
}
@inproceedings{Liskov1974,
	address = {New York, New York, USA},
	author = {Liskov, Barbara and Zilles, Stephen},
	booktitle = {Proc. ACM SIGPLAN Symp. Very high Lev. Lang.},
	hiddendoi = {10.1145/800233.807045},
	publisher = {ACM Press},
	title = {Programming with abstract data types},
	url = {http://portal.acm.org/citation.cfm?hiddendoid=800233.807045},
	year = {1974}
}
@article{Bezanson2014b,
	archivePrefix = {arXiv},
	arxivId = {1411.1607},
	author = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
	eprint = {1411.1607},
	month = nov,
	title = {Julia: A fresh approach to numerical computing},
	url = {http://arxiv.org/abs/1411.1607},
	year = {2014}
}
@article{Ousterhout1998,
	author = {Ousterhout, John K},
	hiddendoi = {10.1109/2.660187},
	journal = {Computer (Long. Beach. Calif).},
	month = mar,
	number = {3},
	title = {Scripting: higher level programming for the 21st Century},
	volume = {31},
	year = {1998}
}
@inproceedings{Seljebotn2009,
	author = {Seljebotn, Dag Sverre},
	booktitle = {Proc. 8th Python Sci. Conf.},
	editor = {Varoquaux, Gael and van der Walt, St\'{e}fan and Millman, Jarrod},
	title = {Fast numerical computations with {Cython}},
	year = {2009}
}
@article{Walt2011,
        Author = {van der Walt, St\'efan and Colbert, S. Chris and Varoquaux, Ga\"el},
	Journal = {Computing in Science \& Engineering},
	Number = {2},
	Title = {The {NumPy} Array: A Structure for Efficient Numerical Computation},
	Volume = {13},
	Year = {2011},
}
@article{Joisha2006,
	author = {Joisha, Pramod G and Banerjee, Prithviraj},
	hiddendoi = {10.1145/1152649.1152651},
	journal = {ACM Trans. Program. Lang. Syst.},
	month = sep,
	number = {5},
	title = {An algebraic array shape inference system for {MATLAB®}},
	volume = {28},
	year = {2006}
}
@techreport{Joisha2001,
	author = {Joisha, Pramod G and Banerjee, Prithviraj},
	institution = {Center for Parallel and Distributed Computing},
	title = {Lattice-based type determination in {MATLAB}, with an emphasis on handling type incorrect programs},
	year = {2001}
}
@inproceedings{Bolz2013,
	address = {New York, New York, USA},
	author = {Bolz, Carl Friedrich and Diekmann, Lukas and Tratt, Laurence},
	booktitle = {OOPSLA '13},
	hiddenhiddendoi = {10.1145/2509136.2509531},
	publisher = {ACM Press},
	title = {Storage strategies for collections in dynamically typed languages},
	year = {2013}
}
@book{Langtangen2008,
	address = {Berlin, Heidelberg},
	author = {Langtangen, Hans Petter},
	hiddenhiddendoi = {10.1007/978-3-540-73916-6},
	publisher = {Springer Berlin Heidelberg},
	series = {Texts in Computational Science and Engineering},
	title = {Python Scripting for Computational Science},
	volume = {3},
	year = {2008},
	note = {p. 167}
}
@article{Wells1999,
	author = {Wells, J B},
	hiddendoi = {10.1016/S0168-0072(98)00047-5},
	journal = {Ann. Pure Appl. Log.},
	month = jun,
	number = {1-3},
	title = {Typability and type checking in {System F} are equivalent and undecidable},
	volume = {98},
	year = {1999}
}
@article{Kam1977,
	abstract = {We consider a generalization of Kildall's lattice theoretic approach to data flow analysis, which we call monotone data flow analysis frameworks. Many flow analysis problems which appear in practice meet the monotonicity condition but not Kildall's condition called distributivity. We show that the maximal fixed point solution exists for every instance of every monotone framework, and that it can be obtained by Kildall's algorithm. However, whenever the framework is monotone but not distributive, there are instances in which the desired solution—the “meet over all paths solution” — differs from the maximal fixed point. Finally, we show the nonexistence of an algorithm to compute the meet over all paths solution for monotone frameworks.},
	author = {Kam, John B. and Ullman, Jeffrey D.},
	hiddendoi = {10.1007/BF00290339},
	journal = {Acta Inform.},
	number = {3},
	title = {Monotone data flow analysis frameworks},
	volume = {7},
	year = {1977}
}
@book{Khedker2009,
	address = {Boca Raton, FL},
	author = {Khedker, Uday and Sanyal, Amitabha and Karkare, Bageshri},
	publisher = {CRC Press},
	title = {Data Flow Analysis: theory and practice},
	year = {2009}
}
@article{Liskov1994,
	author = {Liskov, Barbara H. and Wing, Jeannette M.},
	hiddendoi = {10.1145/197320.197383},
	journal = {ACM Trans. Program. Lang. Syst.},
	month = nov,
	number = {6},
	title = {A behavioral notion of subtyping},
	volume = {16},
	year = {1994}
}
@book{Castagna1997,
	address = {Boston},
	author = {Castagna, Giuseppe},
	publisher = {Birkhäuser},
	series = {Progress in Theoretical Computer Science},
	title = {Object-oriented programming: a unified foundation},
	year = {1997}
}
@inproceedings{Chen2014,
	archivePrefix = {arXiv},
	arxivId = {1410.6649 [cs.PL]},
	author = {Chen, Jiahao and Edelman, Alan},
	eprint = {1410.6649 [cs.PL]},
	month = nov,
	title = {Parallel Prefix Polymorphism Permits Parallelization, Presentation \& Proof},
	url = {http://arxiv.org/abs/1410.6649},
address = {New York, New York, USA},
booktitle = {HPTCDL '14},
publisher = {ACM Press},
	year = {2014}
}
@article{Baker1993,
	author = {Baker, Henry G},
	hiddendoi = {10.1145/165593.165596},
	journal = {ACM OOPS Messenger},
	month = oct,
	number = {4},
	title = {Equal rights for functional objects or, the more things change, the more they are the same},
	volume = {4},
	year = {1993}
}
@book{Nielson2005,
	address = {Berlin},
	author = {Nielson, Flemming and Nielson, Hanne Riis and Hankin, Chris},
	publisher = {Springer},
	title = {Principles of Program Analysis},
	year = {2005}
}
@article{Cousot2000,
	address = {New York, New York, USA},
	author = {Cousot, Patrick and Cousot, Radhia},
	hiddendoi = {10.1145/325694.325699},
	journal = {POPL '00},
	title = {Temporal abstract interpretation},
	year = {2000}
}
@article{Cousot1992,
	author = {Cousot, Patrick and Cousot, Radhia},
	hiddendoi = {10.1016/0743-1066(92)90030-7},
	journal = {J. Log. Program.},
	month = jul,
	number = {2-3},
	title = {Abstract interpretation and application to logic programs},
	volume = {13},
	year = {1992}
}
@incollection{Cousot1992a,
	address = {Berlin/Heidelberg},
	author = {Cousot, Patrick and Cousot, Radhia},
	booktitle = {Program. Lang. Implement. Log. Program.},
	hiddendoi = {10.1007/3-540-55844-6},
	editor = {Bruynooghe, Maurice and Wirsing, Martin},
	publisher = {Springer-Verlag},
	series = {Lecture Notes in Computer Science},
	title = {Comparing the Galois Connection and Widening/Narrowing Approaches to Abstract Interpretation},
	year = {1992}
}
@inproceedings{Cousot1977,
	address = {New York, New York, USA},
	author = {Cousot, Patrick and Cousot, Radhia},
	booktitle = {Proc. ACM Conf. Lang. Des. Reliab. Softw.},
	hiddendoi = {10.1145/800022.808314},
	publisher = {ACM Press},
	title = {Static determination of dynamic properties of generalized type unions},
	year = {1977}
}
@incollection{Mohnen2002,
	address = {Berlin, Heidelberg},
	author = {Mohnen, Markus},
	booktitle = {Compil. Constr.},
	hiddendoi = {10.1007/3-540-45937-5},
	editor = {Horspool, R. Nigel},
	chapter = {5},
	month = mar,
	publisher = {Springer Berlin Heidelberg},
	series = {Lecture Notes in Computer Science},
	title = {A graph-free approach to data-flow analysis},
	year = {2002}
}
@inproceedings{Alpern1988,
	address = {New York, New York, USA},
	author = {Alpern, Bowen and Wegman, Mark N and Zadeck, F. Kenneth},
	booktitle = {POPL '88},
	hiddendoi = {10.1145/73560.73561},
	number = {January},
	publisher = {ACM Press},
	title = {Detecting equality of variables in programs},
	year = {1988}
}
@inproceedings{Rosen1988,
	address = {New York, New York, USA},
	author = {Rosen, B. K. and Wegman, M. N. and Zadeck, F. K.},
	booktitle = {POPL '88},
	hiddendoi = {10.1145/73560.73562},
	publisher = {ACM Press},
	title = {Global value numbers and redundant computations},
	year = {1988}
}
@inproceedings{Kaplan1977,
	author = {Kaplan, Marc A and Ullman, Jeffrey D},
	booktitle = {Fifth Annu. ACM Symp. Princ. Program. Lang.},
	title = {A General Scheme for the Automatic Inference of Variable Types},
	year = {1977}
}
@article{Kaplan1980,
	author = {Kaplan, Marc A. and Ullman, Jeffrey D.},
	hiddendoi = {10.1145/322169.322181},
	journal = {J. ACM},
	month = jan,
	number = {1},
	title = {A Scheme for the Automatic Inference of Variable Types},
	volume = {27},
	year = {1980}
}
@inproceedings{Allen2011,
	address = {New York, New York, USA},
	author = {Allen, Eric and Hilburn, Justin and Kilpatrick, Scott and Luchangco, Victor and Ryu, Sukyoung and Chase, David and Steele, Guy, Jr.},
	booktitle = {OOPSLA '11},
	hiddendoi = {10.1145/2076021.2048140},
	month = oct,
	number = {10},
	publisher = {ACM},
	title = {Type checking modular multiple dispatch with parametric polymorphism and multiple inheritance},
	year = {2011}
}
@phdthesis{Bezanson2012a,
	author = {Bezanson, Jeffrey Werner},
	school = {Massachusetts Institute of Technology},
	title = {Julia: an efficient dynamic language for technical computing},
	type = {S.M.},
	url = {http://18.7.29.232/handle/1721.1/74897},
	year = {2012}
}
@inproceedings{Chambers1994,
	address = {New York, New York, USA},
	author = {Chambers, Craig and Leavens, Gary T.},
	booktitle = {OOPSLA '94},
	hiddendoi = {10.1145/191080.191083},
	month = oct,
	number = {10},
	publisher = {ACM Press},
	title = {Typechecking and modules for multi-methods},
	volume = {29},
	year = {1994}
}
@inproceedings{Agrawal1991,
	address = {New York, New York, USA},
	author = {Agrawal, Rakesh and Demichiel, Linda G and Lindsay, Bruce G},
	booktitle = {OOPSLA '91},
	hiddendoi = {10.1145/117954.117963},
	publisher = {ACM Press},
	title = {{Static type checking of multi-methods}},
	url = {http://portal.acm.org/citation.cfm?hiddendoid=117954.117963},
	year = {1991}
}
@article{Bobrow1988,
	author = {Bobrow, Daniel G. and DeMichiel, Linda G. and Gabriel, Richard P and Keene, Sonya E and Kiczales, Gregor and Moon, David A},
	hiddendoi = {10.1145/885631.885632},
	journal = {ACM SIGPLAN Not.},
	month = sep,
	number = {SI},
	title = {Common Lisp Object System specification},
	volume = {23},
	year = {1988}
}
@inproceedings{Hickey2008,
	address = {New York, New York, USA},
	author = {Hickey, Rich},
	booktitle = {Proc. 2008 Symp. Dyn. Lang. - DLS '08},
	hiddendoi = {10.1145/1408681.1408682},
	publisher = {ACM Press},
	title = {The Clojure programming language},
	year = {2008}
}
@incollection{Chambers1992,
	address = {Berlin/Heidelberg},
	author = {Chambers, Craig},
	booktitle = {ECOOP ’92},
	hiddendoi = {10.1007/BFb0053026},
	editor = {Madsen, Ole Lehrmann},
	publisher = {Springer-Verlag},
	series = {Lecture Notes in Computer Science},
	title = {Object-oriented multi-methods in Cecil},
	year = {1992}
}
@inproceedings{Muschevici:2008,
	Address = {New York, NY, USA},
	Author = {Muschevici, Radu and Potanin, Alex and Tempero, Ewan and Noble, James},
	Booktitle = {Proceedings of the 23rd ACM SIGPLAN Conference on Object-oriented Programming Systems Languages and Applications},
	Location = {Nashville, TN, USA},
	Pages = {563--582},
	Publisher = {ACM},
	Series = {OOPSLA '08},
	Title = {Multiple Dispatch in Practice},
	Year = {2008}
}
@inproceedings{Holkner2009,
	address = {Wellington, New Zealand},
	author = {Holkner, A and Harland, J},
	booktitle = {Proc. Thirty-Second Australas. Conf. Comput. Sci.},
	title = {Evaluating the dynamic behaviour of {P}ython applications},
	volume = {31},
	year = {2009}
}
@inproceedings{Richards2010,
	address = {New York, New York, USA},
	author = {Richards, Gregor and Lebresne, Sylvain and Burg, Brian and Vitek, Jan},
	booktitle = {PLDI '10},
	hiddendoi = {10.1145/1806596.1806598},
	publisher = {ACM Press},
	title = {An analysis of the dynamic behavior of {JavaScript} programs},
	year = {2010}
}
@article{Callau2012,
	author = {Calla\'{u}, Oscar and Robbes, Romain and Tanter, \'{E}ric and R\"{o}thlisberger, David},
	hiddendoi = {10.1007/s10664-012-9203-2},
	journal = {Empir. Softw. Eng.},
	month = mar,
	number = {6},
	title = {How (and why) developers use the dynamic features of programming languages: the case of {Smalltalk}},
	volume = {18},
	year = {2012}
}
@book{Golub2013,
	address = {Baltimore, MD},
	author = {Golub, Gene H and {Van Loan}, Charles F},
	edition = {4},
	publisher = {Johns Hopkins},
	series = {Johns Hopkins Studies in the Mathematical Sciences},
	title = {{Matrix Computations}},
	year = {2013}
}
@article{Chamberlain2013,
	author = {Chamberlain, Bradford L.},
	number = {January},
	title = {{A Brief Overview of Chapel}},
	volume = {1},
	year = {2013}
}
@book{Press1992,
	address = {Cambridge, UK},
	author = {Press, William H and Teukolsky, Saul A and Vetterling, William T and Flannery, Brian P},
	edition = {2},
	publisher = {Cambridge University Press},
	title = {Numerical recipes in {Fortran 77}: The Art of Scientific Computing}},
	year = {1992}
}
@article{Townsend2014,
	author = {Townsend, Alex and Trefethen, Lloyd N},
	hiddendoi = {10.1098/rspa.2014.0585},
	journal = {Proceedings of the Royal Society A},
	number = {2173},
	title = {Continuous analogues of matrix factorizations},
	volume = {471},
	year = {2014}
}
@article{Gunnels2001,
	abstract = {Since the advent of high-performance distributed-memory parallel computing, the need for intelligible code has become ever greater. The development and maintenance of libraries for these architectures is simply too complex to be amenable to conventional approaches to coding and attempting to employ traditional methodology has led to the production of an abundance of inecient, anfractuous code that is difficult to maintain and nigh-impossible to upgrade.},
	author = {Gunnels, John a. and Gustavson, Fred G. and Henry, Greg M. and van de Geijn, Robert a.},
	hiddendoi = {10.1145/504210.504213},
	journal = {ACM Transactions on Mathematical Software},
	number = {4},
	title = {{FLAME}: Formal Linear Algebra Methods Environment},
	volume = {27},
	year = {2001}
}
@inproceedings{OpenBLAS,
	author = {Zhang, Xianyi and Wang, Qian and Zhang, Yunquan},
	booktitle = {ICPADS},
	hiddendoi = {10.1109/ICPADS.2012.97},
	title = {Model-driven level 3 {BLAS} performance optimization on {Loongson 3A} processor},
	year = {2012}
}
@article{VanZee2013,
	abstract = {We study the problem of computing conditional probabilities, a fundamental operation in statistics and machine learning. In the elementary discrete setting, a ratio of probabilities defines conditional probability. In the abstract setting, conditional probability is defined axiomatically and the search for more constructive definitions is the subject of a rich literature in probability theory and statistics. In the discrete or dominated setting, under suitable computability hypotheses, conditional probabilities are computable. However, we show that in general one cannot compute conditional probabilities. We do this by constructing a pair of computable random variables in the unit interval whose conditional distribution encodes the halting problem at almost every point. We show that this result is tight, in the sense that given an oracle for the halting problem, one can compute this conditional distribution. On the other hand, we show that conditioning in abstract settings is computable in the presence of certain additional structure, such as independent absolutely continuous noise.},
	archivePrefix = {arXiv},
	arxivId = {1005.3014},
	author = {{Van Zee}, Field G and {Van de Geijn}, Robert A},
	eprint = {1005.3014},
	journal = {ACM Transactions on Mathematical Software},
	title = {{BLIS}: A Framework for Rapidly Instantiating {BLAS} Functionality},
	url = {http://arxiv.org/abs/1005.3014},
	year = {2013}
}
@book{LAPACK,
	address = {Philadelphia, PA},
	author = {Anderson, E and Bai, Z and Bischof, C and Blackford, S and Demmel, J and Dongarra, J and {Du Croz}, J and Greenbaum, A and Hammarling, S and McKenney, A and Sorensen, D},
	edition = {3},
	publisher = {SIAM},
	title = {{LAPACK} Users' Guide},
	url = {http://www.netlib.org/lapack/lug/},
	year = {1999}
}
@article{Tierney2014,
	author = {Tierney, Luke},
	title = {{A Byte Code Compiler for R}},
	year = {2014}
}
@inproceedings{oliphant2012numba,
	title={Numba python bytecode to LLVM translator},
	author={Oliphant, Travis},
	booktitle={Proceedings of the Python for Scientific Computing Conference (SciPy)},
	year={2012}
}
@article{Ishizaki2010,
	author = {Ishizaki, Kazuaki},
	hiddendoi = {10.1145/1565824.1565827},
	title = {{Tracing the Meta-Level : PyPy's Tracing JIT Compiler}},
	year = {2010}
}
@techreport{matlab2002matlab,
	title={The MATLAB JIT-Accelerator},
	author={MATLAB, Accelerating},
	year={2002},
	institution={Technical report, The Mathworks, Inc., Natick, MA, USA}
}
@article{Chevalier-Boisvert2010,
	author = {Chevalier-Boisvert, Maxime and Hendren, Laurie and Verbrugge, Clark},
	hiddendoi = {10.1007/978-3-642-11970-5\_4},
	journal = {Lecture Notes in Computer Science},
	title = {{Optimizing Matlab through just-in-time specialization}},
	volume = {6011 LNCS},
	year = {2010}
}
@techreport{python,
	address = {Amsterdam},
	author = {van Rossum, Guido},
	institution = {Centrum voor Wiskunde en Informatica},
	title = {Python reference manual},
	year = {1995}
}
@article{numpy,
	abstract = {In the Python world, NumPy arrays are the standard representation for numerical data and enable efficient implementation of numerical computations in a high-level language. As this effort shows, NumPy performance can be improved through three techniques: vectorizing calculations, avoiding copying data in memory, and minimizing operation counts.},
	archivePrefix = {arXiv},
	arxivId = {1102.1523},
	author = {{Van Der Walt}, St\'{e}fan and Colbert, S. Chris and Varoquaux, Ga\"{e}l},
	hiddendoi = {10.1109/MCSE.2011.37},
	eprint = {1102.1523},
	journal = {Computing in Science and Engineering},
	number = {2},
	title = {The {NumPy} array: A structure for efficient numerical computation},
	volume = {13},
	year = {2011}
}
@book{octave,
	author    = {John W. Eaton and David Bateman and S\oren Hauberg},
	title     = {{GNU Octave} version 3.0.1 manual: a high-level interactive language for numerical computations},
	publisher = {CreateSpace Independent Publishing Platform},
	year      = {2009},
	note      = {{ISBN} 1441413006},
	url       = {http://www.gnu.org/software/octave/doc/interpreter},
}
@inproceedings{Bolz2009,
abstract = {We attempt to apply the technique of Tracing JIT Compilers in the context of the PyPy project, i.e., to programs that are interpreters for some dynamic languages, including Python. Tracing JIT compilers can greatly speed up programs that spend most of their time in loops in which they take similar code paths. However, applying an unmodified tracing JIT to a program that is itself a bytecode interpreter results in very limited or no speedup. In this paper we show how to guide tracing JIT compilers to greatly improve the speed of bytecode interpreters. One crucial point is to unroll the bytecode dispatch loop, based on two kinds of hints provided by the implementer of the bytecode interpreter. We evaluate our technique by applying it to two PyPy interpreters: one is a small example, and the other one is the full Python interpreter.},
author = {Bolz, Carl Friedrich and Cuni, Antonio and Fijalkowski, Maciej and Rigo, Armin},
booktitle = {ICOOOLPS '09},
hiddendoi = {10.1145/1565824.1565827},
title = {Tracing the meta-level: {PyPy}'s tracing {JIT} compiler},
year = {2009}
}
@misc{gadfly_jl,
  author       = {Daniel Jones and
                  David Chudzicki and
                  Avik Sengupta and
                  Darwin Darakananda and
                  Tim Holy and
                  Dave Kleinschmidt and
                  Keno Fischer and
                  Iain Dunning and
                  inkyu and
                  John Verzani and
                  Calder Coalson and
                  Stefan Karpinski and
                  Randy Zwitch and
                  Jared Forsyth and
                  Elliot Saba and
                  Sean Garborg and
                  nignatiadis and
                  Blake Johnson and
                  powerdistribution and
                  Sven Mesecke and
                  Stephen Eglen and
                  Sean Mackesey and
                  Adri\'an and
                  Robert J. Ennis and
                  M. Schauer and
                  Jiahao Chen and
                  Jason Merrill and
                  Jason Knight and
                  Ivar Nesje and
                  Dahua Lin},
  title        = {Gadfly.jl: Version 0.3.9},
  month        = September,
  year         = 2014,
  hiddendoi          = {10.5281/zenodo.11876},
  url          = {http://dx.hiddendoi.org/10.5281/zenodo.11876}
}
@article{pall2008luajit,
	 title={The luajit project},
	 author={Pall, Mike},
	 journal={Web site: http://luajit. org},
	 year={2008}
}
@article{Gustavson2010,
abstract = {We describe a new data format for storing triangular, symmetric, and Hermitian matrices called RFPF (Rectangular Full Packed Format). The standard two dimensional arrays of Fortran and C (also known as full format) that are used to represent triangular and symmetric matrices waste nearly half of the storage space but provide high performance via the use of Level 3 BLAS. Standard packed format arrays fully utilize storage (array space) but provide low performance as there is no Level 3 packed BLAS. We combine the good features of packed and full storage using RFPF to obtain high performance via using Level 3 BLAS as RFPF is a standard full format representation. Also, RFPF requires exactly the same minimal storage as packed format. Each LAPACK full and/or packed triangular, symmetric, and Hermitian routine becomes a single new RFPF routine based on eight possible data layouts of RFPF. This new RFPF routine usually consists of two calls to the corresponding LAPACK full format routine and two calls to Level 3 BLAS routines. This means \{$\backslash$it no\} new software is required. As examples, we present LAPACK routines for Cholesky factorization, Cholesky solution and Cholesky inverse computation in RFPF to illustrate this new work and to describe its performance on several commonly used computer platforms. Performance of LAPACK full routines using RFPF versus LAPACK full routines using standard format for both serial and SMP parallel processing is about the same while using half the storage. Performance gains are roughly one to a factor of 43 for serial and one to a factor of 97 for SMP parallel times faster using vendor LAPACK full routines with RFPF than with using vendor and/or reference packed routines.},
archivePrefix = {arXiv},
arxivId = {0901.1696},
author = {Gustavson, Fred G. and Wasniewski, Jerzy and Dongarra, Jack J. and Langou, Julien},
hiddendoi = {10.1145/1731022.1731028},
eprint = {0901.1696},
file = {:Users/jiahao/Documents/Mendeley Desktop/Gustavson et al/ACM Transactions on Mathematical Software/Gustavson et al. - 2010 - Rectangular Full Packed Format for Cholesky's Algorithm Factorization, Solution and Inversion.pdf:pdf},
journal = {ACM Transactions on Mathematical Software},
number = {2},
title = {{Rectangular Full Packed Format for Cholesky's Algorithm: Factorization, Solution and Inversion}},
url = {http://arxiv.org/abs/0901.1696},
volume = {37},
year = {2010}
}
